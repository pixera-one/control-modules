{
 "api": [
  {
   "body": "require \"pixcHelper\"\nrequire \"pixcNetwork\"\nif self.helper ~= nil then\n\treturn \nend\nself.helper = createPixcHelper(pixc,self())\nself.network = createPixcNetwork()\nself.connected = false\npixc.log(self.helper)\npixc.log(self.network)\nself.IsConnected(false, true)\nself.ip = self.helper:getProperty(\"IP\",\"192.168.2.140\")\nself.port = tonumber(self.helper:getProperty(\"Port\",\"10600\"))\nself.network:configureTcp(\n\tself.ip,\n\tself.port,\n\tfunction (handle, data) self().receive(data) end,\n\tfunction(handle, error) pixc.log(\"closeCallback: \"..error) end)\nself.network:setStatusCallbacks(\n\tfunction (...) pixc.log(...) end,\n\tfunction(isConnected) self().IsConnected(isConnected) end)\nself.network:start()\n",
   "kind": "func",
   "name": "init"
  },
  {
   "body": "if self.network == nil then return end\nself.network:close()\nself.network = nil\nself.helper = nil\n",
   "kind": "func",
   "name": "uninit"
  },
  {
   "attKind": "internal",
   "body": "pixc.log(\"got data\")\npixc.log(msg)\nself.data = msg",
   "kind": "func",
   "name": "receive",
   "params": [
    {
     "name": "msg",
     "type": "string"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "self.connected = pixcCommon.execAttribute(false, self.connected, isConnected, doSet)\n\nUtils.Timer.sleep(1200)\nif isConnected == true then\n\tself.StartupGetActiveScreen()\nend\n",
   "kind": "func",
   "name": "IsConnected",
   "params": [
    {
     "name": "isConnected",
     "type": "bool"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ]
  },
  {
   "body": "self.GetScreenStatus.Screen1()\nUtils.Timer.sleep(30)\nself.GetScreenStatus.Screen2()\nUtils.Timer.sleep(30)\nself.GetScreenStatus.Screen3()\nUtils.Timer.sleep(30)\nself.GetScreenStatus.Screen4()\nUtils.Timer.sleep(30)\nself.GetScreenStatus.Screen5()\nUtils.Timer.sleep(30)\nself.GetScreenStatus.Screen6()\nUtils.Timer.sleep(30)\nself.GetScreenStatus.Screen7()\nUtils.Timer.sleep(30)\nself.GetScreenStatus.Screen8()\nUtils.Timer.sleep(300)\nself.GetTbarStatus.RefreshAll()\nUtils.Timer.sleep(100)\nself.GetTbarStatus.RefreshAll()",
   "kind": "func",
   "name": "StartupGetActiveScreen",
   "slotStyle": "leftNone;rightNone"
  },
  {
   "attKind": "standard",
   "attReports": {
    "0": "1000.00"
   },
   "body": "self._TakeTime = pixcCommon.execAttribute(0, self._TakeTime, val, doSet)\r\nself.TakeTime = math.floor(val)\r\nreturn self._TakeTime\r\n-- This action is used only in the Ascender modules.\r\n-- Please enter the upper limit of the TAKE transition time of Midra4K. If the time is not entered, it will be 1000mS. \r\n-- Ascender's TAKE transition time will not be changed.",
   "kind": "func",
   "name": "TakeTime",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "slotStyle": "leftOut;rightNone;triggerHidden"
  },
  {
   "elems": [
    {
     "body": "if self.network == nil then\treturn end\nif self.SSscreen1 == 1 then\n\tself.TakeScreen1 = \"0,1SPscl\\n\"\n\telse\n\tself.TakeScreen1 = \"0,0SPscl\\n\"\nend\nif self.SSscreen2 == 1 then\n\tself.TakeScreen2 = \"1,1SPscl\\n\"\n\telse\n\tself.TakeScreen2 = \"1,0SPscl\\n\"\nend\nif self.SSscreen3 == 1 then\n\tself.TakeScreen3 = \"2,1SPscl\\n\"\n\telse\n\tself.TakeScreen3 = \"2,0SPscl\\n\"\nend\nif self.SSscreen4 == 1 then\n\tself.TakeScreen4 = \"3,1SPscl\\n\"\n\telse\n\tself.TakeScreen4 = \"3,0SPscl\\n\"\nend\nif self.SSscreen5 == 1 then\n\tself.TakeScreen5 = \"4,1SPscl\\n\"\n\telse\n\tself.TakeScreen5 = \"4,0SPscl\\n\"\nend\nif self.SSscreen6 == 1 then\n\tself.TakeScreen6 = \"5,1SPscl\\n\"\n\telse\n\tself.TakeScreen6 = \"5,0SPscl\\n\"\nend\nif self.SSscreen7 == 1 then\n\tself.TakeScreen7 = \"6,1SPscl\\n\"\n\telse\n\tself.TakeScreen7 = \"6,0SPscl\\n\"\nend\nif self.SSscreen8 == 1 then\n\tself.TakeScreen8 = \"7,1SPscl\\n\"\n\telse\n\tself.TakeScreen8 = \"7,0SPscl\\n\"\nend\nself.network:send(self.TakeScreen1..self.TakeScreen2..self.TakeScreen3..self.TakeScreen4..self.TakeScreen5..self.TakeScreen6..self.TakeScreen7..self.TakeScreen8..\"1SPtsl\\n\")\n\nif type(self.TakeTime) ~= \"number\" then\n\tself.TakeAll = 1000\n\telse\n\tself.TakeAll = self.TakeTime\nend\nif self.TakeAll <= 1000 then\n\tself.TakeAllTakeTime = 1000\n\telse\n\tself.TakeAllTakeTime = self.TakeAll\nend\n\t\nUtils.Timer.sleep(self.TakeAllTakeTime)\nUtils.Timer.sleep(300)\nself.GetTbarStatus.RefreshAll()\nUtils.Timer.sleep(100)\nself.GetTbarStatus.RefreshAll()",
     "kind": "func",
     "name": "AllScreen",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"0,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen1",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"1,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen2",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"2,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen3",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"3,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen4",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"4,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen5",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"5,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen6",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"6,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen7",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"7,1SPCtk\\n\"\n",
     "kind": "func",
     "name": "Screen8",
     "slotStyle": "leftIn;rightNone"
    }
   ],
   "kind": "ns",
   "name": "TAKE"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.network == nil then return end\r\nif type(Value) ~= \"number\" then return end\r\nif self.TBARstatus == nil then return end\r\nif self.SSTbar1 == nil then return end\r\n\r\nif self.TBARstatus == \"A\" and self.SSTbar1 == \"A\" then\r\n\tself.TBARoutA = Value\r\n\telseif self.TBARstatus == \"B\" and self.SSTbar1 == \"B\" then\r\n\tself.TBARoutA = Value\r\n\telseif self.TBARstatus == \"A\" and self.SSTbar1 == \"B\" then\r\n\tself.TBARoutA = (Value - 0)/65535 * (0-65535) + 65535\r\n\telseif self.TBARstatus == \"B\" and self.SSTbar1 == \"A\" then\r\n\tself.TBARoutA = (Value - 0)/65535 * (0-65535) + 65535\r\nend\r\n\r\nlocal tbarValue = math.floor(self.TBARoutA)\r\n\r\nself.network:send(\"0,\" ..tbarValue.. \"SPCtb\\n\")\r\n",
     "kind": "func",
     "name": "Screen1",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.network == nil then return end\nif type(Value) ~= \"number\" then return end\nif self.TBARstatus == nil then return end\nif self.SSTbar2 == nil then return end\n\nif self.TBARstatus == \"A\" and self.SSTbar2 == \"A\" then\n\tself.TBARoutB = Value\n\telseif self.TBARstatus == \"B\" and self.SSTbar2 == \"B\" then\n\tself.TBARoutB = Value\n\telseif self.TBARstatus == \"A\" and self.SSTbar2 == \"B\" then\n\tself.TBARoutB = (Value - 0)/65535 * (0-65535) + 65535\n\telseif self.TBARstatus == \"B\" and self.SSTbar2 == \"A\" then\n\tself.TBARoutB = (Value - 0)/65535 * (0-65535) + 65535\nend\n\nlocal tbarValue = math.floor(self.TBARoutB)\n\nself.network:send(\"1,\" ..tbarValue.. \"SPCtb\\n\")",
     "kind": "func",
     "name": "Screen2",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.network == nil then return end\nif type(Value) ~= \"number\" then return end\nif self.TBARstatus == nil then return end\nif self.SSTbar3 == nil then return end\n\nif self.TBARstatus == \"A\" and self.SSTbar3 == \"A\" then\n\tself.TBARoutC = Value\n\telseif self.TBARstatus == \"B\" and self.SSTbar3 == \"B\" then\n\tself.TBARoutC = Value\n\telseif self.TBARstatus == \"A\" and self.SSTbar3 == \"B\" then\n\tself.TBARoutC = (Value - 0)/65535 * (0-65535) + 65535\n\telseif self.TBARstatus == \"B\" and self.SSTbar3 == \"A\" then\n\tself.TBARoutC = (Value - 0)/65535 * (0-65535) + 65535\nend\n\nlocal tbarValue = math.floor(self.TBARoutC)\n\nself.network:send(\"2,\" ..tbarValue.. \"SPCtb\\n\")",
     "kind": "func",
     "name": "Screen3",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.network == nil then return end\nif type(Value) ~= \"number\" then return end\nif self.TBARstatus == nil then return end\nif self.SSTbar4 == nil then return end\n\nif self.TBARstatus == \"A\" and self.SSTbar4 == \"A\" then\n\tself.TBARoutD = Value\n\telseif self.TBARstatus == \"B\" and self.SSTbar4 == \"B\" then\n\tself.TBARoutD = Value\n\telseif self.TBARstatus == \"A\" and self.SSTbar4 == \"B\" then\n\tself.TBARoutD = (Value - 0)/65535 * (0-65535) + 65535\n\telseif self.TBARstatus == \"B\" and self.SSTbar4 == \"A\" then\n\tself.TBARoutD = (Value - 0)/65535 * (0-65535) + 65535\nend\n\nlocal tbarValue = math.floor(self.TBARoutD)\n\nself.network:send(\"3,\" ..tbarValue.. \"SPCtb\\n\")",
     "kind": "func",
     "name": "Screen4",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if self.network == nil then return end\nif type(Value) ~= \"number\" then return end\nif self.TBARstatus == nil then return end\nif self.SSTbar5 == nil then return end\n\nif self.TBARstatus == \"A\" and self.SSTbar5 == \"A\" then\n\tself.TBARoutE = Value\n\telseif self.TBARstatus == \"B\" and self.SSTbar5 == \"B\" then\n\tself.TBARoutE = Value\n\telseif self.TBARstatus == \"A\" and self.SSTbar5 == \"B\" then\n\tself.TBARoutE = (Value - 0)/65535 * (0-65535) + 65535\n\telseif self.TBARstatus == \"B\" and self.SSTbar5 == \"A\" then\n\tself.TBARoutE = (Value - 0)/65535 * (0-65535) + 65535\nend\n\nlocal tbarValue = math.floor(self.TBARoutE)\n\nself.network:send(\"4,\" ..tbarValue.. \"SPCtb\\n\")",
     "kind": "func",
     "name": "Screen5",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if self.network == nil then return end\nif type(Value) ~= \"number\" then return end\nif self.TBARstatus == nil then return end\nif self.SSTbar6 == nil then return end\n\nif self.TBARstatus == \"A\" and self.SSTbar6 == \"A\" then\n\tself.TBARoutF = Value\n\telseif self.TBARstatus == \"B\" and self.SSTbar6 == \"B\" then\n\tself.TBARoutF = Value\n\telseif self.TBARstatus == \"A\" and self.SSTbar6 == \"B\" then\n\tself.TBARoutF = (Value - 0)/65535 * (0-65535) + 65535\n\telseif self.TBARstatus == \"B\" and self.SSTbar6 == \"A\" then\n\tself.TBARoutF = (Value - 0)/65535 * (0-65535) + 65535\nend\n\nlocal tbarValue = math.floor(self.TBARoutF)\nself.network:send(\"5,\" ..tbarValue.. \"SPCtb\\n\")",
     "kind": "func",
     "name": "Screen6",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if self.network == nil then return end\nif type(Value) ~= \"number\" then return end\nif self.TBARstatus == nil then return end\nif self.SSTbar7 == nil then return end\n\nif self.TBARstatus == \"A\" and self.SSTbar7 == \"A\" then\n\tself.TBARoutG = Value\n\telseif self.TBARstatus == \"B\" and self.SSTbar7 == \"B\" then\n\tself.TBARoutG = Value\n\telseif self.TBARstatus == \"A\" and self.SSTbar7 == \"B\" then\n\tself.TBARoutG = (Value - 0)/65535 * (0-65535) + 65535\n\telseif self.TBARstatus == \"B\" and self.SSTbar7 == \"A\" then\n\tself.TBARoutG = (Value - 0)/65535 * (0-65535) + 65535\nend\n\nlocal tbarValue = math.floor(self.TBARoutG)\n\nself.network:send(\"6,\" ..tbarValue.. \"SPCtb\\n\")",
     "kind": "func",
     "name": "Screen7",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if self.network == nil then return end\nif type(Value) ~= \"number\" then return end\nif self.TBARstatus == nil then return end\nif self.SSTbar8 == nil then return end\n\nif self.TBARstatus == \"A\" and self.SSTbar8 == \"A\" then\n\tself.TBARoutH = Value\n\telseif self.TBARstatus == \"B\" and self.SSTbar8 == \"B\" then\n\tself.TBARoutH = Value\n\telseif self.TBARstatus == \"A\" and self.SSTbar8 == \"B\" then\n\tself.TBARoutH = (Value - 0)/65535 * (0-65535) + 65535\n\telseif self.TBARstatus == \"B\" and self.SSTbar8 == \"A\" then\n\tself.TBARoutH = (Value - 0)/65535 * (0-65535) + 65535\nend\n\nlocal tbarValue = math.floor(self.TBARoutH)\n\nself.network:send(\"7,\" ..tbarValue.. \"SPCtb\\n\")",
     "kind": "func",
     "name": "Screen8",
     "params": [
      {
       "name": "Value",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "B"
     },
     "body": "self.TBARstatus = pixcCommon.execAttribute(0, self.TBARstatus, val, doSet)\nreturn self.TBARstatus",
     "kind": "func",
     "name": "TbarStatus",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "TBAR"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "attReports": {
      "0": "Preview"
     },
     "body": "self.MPtarget = pixcCommon.execAttribute(0, self.MPtarget, val, doSet, true )\n",
     "kind": "func",
     "name": "Target",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftIn;rightOut;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.network == nil then return end\nif type(val) ~= \"number\" then return end\nif self.MPtarget == nil then return end\nif self.MPtarget == \"Program\" then\n\tself.MPMIDTarget = \"0\"\n\telseif self.MPtarget == \"Preview\" then\n\tself.MPMIDTarget = \"1\"\nend\nlocal Memory = math.floor(tonumber(val))\n\nself.network:send(\"4095PMcat\\n0PMlse\\n\" .. Memory-1 .. \"PSmet\\n\" ..self.MPMIDTarget.. \"PSprf\\n1PSloa\\n\")\n",
     "kind": "func",
     "name": "MemortID",
     "params": [
      {
       "name": "val",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "LoadMasterPreset"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "attReports": {
      "0": "Preview"
     },
     "body": "self.SPtarget = pixcCommon.execAttribute(0, self.SPtarget, val, doSet, true )\n",
     "kind": "func",
     "name": "Target",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftIn;rightOut;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "4.00"
     },
     "body": "self.SPID = pixcCommon.execAttribute(0, self.SPID, val, doSet, true )\n",
     "kind": "func",
     "name": "ScreenID",
     "params": [
      {
       "name": "val",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.network == nil then return end\nif type(val) ~= \"number\" then return end\nif self.SPID == nil then return end\nif self.SPtarget == nil then return end\nif self.SPtarget == \"Program\" then\n\tself.SPMIDTarget = \"0\"\n\telseif self.SPtarget == \"Preview\" then\n\tself.SPMIDTarget = \"1\"\nend\nlocal Memory = math.floor(val)\nlocal ID = math.floor(tonumber(self.SPID))\n\nself.network:send(\"4095PMcat\\n0PMlse\\n\" .. Memory-1 .. \"PMmet\\n\" .. ID-1 .. \"PMscf\\n\" .. self.SPMIDTarget .. \"PMprf\\n1PMloa\\n\")\n",
     "kind": "func",
     "name": "MemoryID",
     "params": [
      {
       "name": "val",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "Screen4"
     },
     "body": "if type(self.SPID) ~= \"number\" then return end\n\nlocal ID = math.floor(self.SPID)\nself.LSLabelA = pixcCommon.execAttribute(0, self.LSLabelA, \"Screen\"..ID, doSet, true )\nreturn self.LSLabelA",
     "kind": "func",
     "name": "ScreenLabel",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "if self.network == nil then\treturn end\nif self.SPID == nil then return end\nlocal ID = math.floor(tonumber(self.SPID))\nself.network:send(ID-1 ..\",1SPCtk\\n\")\n\nif type(self.TakeTime) ~= \"number\" then\n\tself.TakeAll = 1000\n\telse\n\tself.TakeAll = self.TakeTime\nend\nif self.TakeAll <= 1000 then\n\tself.TakeAllTakeTime = 1000\n\telse\n\tself.TakeAllTakeTime = self.TakeAll\nend\n\t\nUtils.Timer.sleep(self.TakeAllTakeTime)\nUtils.Timer.sleep(300)\nself.GetTbarStatus.RefreshAll()\nUtils.Timer.sleep(100)\nself.GetTbarStatus.RefreshAll()",
     "kind": "func",
     "name": "TAKE",
     "slotStyle": "leftNone;rightNone"
    }
   ],
   "kind": "ns",
   "name": "LoadScreenPreset"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "attReports": {
      "0": "Preview"
     },
     "body": "self.LSTarget = pixcCommon.execAttribute(0, self.LSTarget, val, doSet, true )\n",
     "kind": "func",
     "name": "Target",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftIn;rightOut;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "1.00"
     },
     "body": "self.LSScreenID = pixcCommon.execAttribute(0, self.LSScreenID, val, doSet, true )\n",
     "kind": "func",
     "name": "ScreenID",
     "params": [
      {
       "name": "val",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "5.00"
     },
     "body": "self.LSLayerID = pixcCommon.execAttribute(0, self.LSLayerID, val, doSet, true )\n",
     "kind": "func",
     "name": "LayerID",
     "params": [
      {
       "name": "val",
       "type": ""
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "Input"
     },
     "body": "self.SourceTarget = pixcCommon.execAttribute(0, self.SourceTarget, val, doSet, true )\n",
     "kind": "func",
     "name": "SourceType",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "self.MasterSlave = pixcCommon.execAttribute(0, self.SorceTarget, val, doSet, true )\n",
     "kind": "func",
     "name": "MasterSlave",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftIn;rightOut;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "5.00"
     },
     "body": "self.CLSourceDisplay = pixcCommon.execAttribute(0, self.CLSourceDisplay, val, doSet, true )\nif self.network == nil then\treturn end\nif type(val) ~= \"number\" then return end\nif self.LSTarget == nil then return end\nif self.LSScreenID == nil then return end\nif self.LSLayerID == nil then return end\nif self.SourceTarget == nil then return end\nif self.MasterSlave == nil then\n\tMSTarget = \"Master\"\n\telse\n\tMSTarget = self.MasterSlave\nend\n\nif self.LSTarget == \"Program\" then\n\tself.LSSTarget = \"0\"\n\telseif self.LSTarget == \"Preview\" then\n\tself.LSSTarget = \"1\"\nend\nself.LSSourceID = math.floor(val)\nlocal ScreenID = math.floor(tonumber(self.LSScreenID))\nlocal LayerID = math.floor(tonumber(self.LSLayerID))\n\nif self.SourceTarget == \"Background\" then\n\tself.LSSLayer = \"\"\n\telse\n\tself.LSSLayer = LayerID-1 ..\",\"\nend\n\nif self.LSSourceID == 13 then\n\tself.LSSSource = 0\n\telseif self.LSSourceID == 14 then\n\tself.LSSSource = 41\n\telseif self.SourceTarget == \"Background\" then\n\tself.LSSSource = self.LSSourceID\n\telseif self.SourceTarget == \"Input\" and MSTarget == \"Master\" then\n\tself.LSSSource = self.LSSourceID\n\telseif self.SourceTarget == \"Input\" and MSTarget == \"Slave\" then\n\tself.LSSSource = self.LSSourceID + 12\n\telseif self.SourceTarget == \"FrameLogo\" and MSTarget == \"Master\" and self.LSSourceID <= 4 then\n\tself.LSSSource = self.LSSourceID + 24\n\telseif self.SourceTarget == \"FrameLogo\" and MSTarget == \"Master\" and self.LSSourceID >= 5 then\n\tself.LSSSource = self.LSSourceID + 28\n\telseif self.SourceTarget == \"FrameLogo\" and MSTarget == \"Slave\" and self.LSSourceID <= 4 then\n\tself.LSSSource = self.LSSourceID + 28\n\telseif self.SourceTarget == \"FrameLogo\" and MSTarget == \"Slave\" and self.LSSourceID >= 5 then\n\tself.LSSSource = self.LSSourceID + 32\nend\n\nif self.SourceTarget == \"Background\" then\n\tself.LSSCommand = \"SPPNi\"\n\telse\n\tself.LSSCommand = \"SPPEi\"\nend\n\nself.network:send(ScreenID-1 .. \",\" .. self.LSSTarget .. \",\" .. self.LSSLayer .. self.LSSSource .. self.LSSCommand .. \"\\n\")",
     "kind": "func",
     "name": "Source",
     "params": [
      {
       "name": "val",
       "type": "int"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "Screen1"
     },
     "body": "if type(self.LSScreenID) ~= \"number\" then return end\n\nlocal ID = math.floor(self.LSScreenID)\nself.LSLabelA = pixcCommon.execAttribute(0, self.LSLabelA, \"Screen\"..ID, doSet, true )\nreturn self.LSLabelA",
     "kind": "func",
     "name": "ScreenLabel",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "LayerE"
     },
     "body": "if type(self.LSLayerID) ~= \"number\" then return end\nif self.SourceTarget == nil then return end\n\nlocal ID = math.floor(self.LSLayerID)\nif self.SourceTarget == \"Background\" then\n\tself.LSLabelB = \"Background\"\n\telseif ID == 1 then\n\tself.LSLabelB = \"LayerA\"\n\telseif ID == 2 then\n\tself.LSLabelB = \"LayerB\"\n\telseif ID == 3 then\n\tself.LSLabelB = \"LayerC\"\n\telseif ID == 4 then\n\tself.LSLabelB = \"LayerD\"\n\telseif ID == 5 then\n\tself.LSLabelB = \"LayerE\"\n\telseif ID == 6 then\n\tself.LSLabelB = \"LayerF\"\n\telseif ID == 7 then\n\tself.LSLabelB = \"LayerG\"\n\telseif ID == 8 then\n\tself.LSLabelB = \"LayerH\"\n\telseif ID == 9 then\n\tself.LSLabelB = \"LayerI\"\n\telseif ID == 10 then\n\tself.LSLabelB = \"LayerJ\"\n\telseif ID == 11 then\n\tself.LSLabelB = \"LayerK\"\n\telseif ID == 12 then\n\tself.LSLabelB = \"LayerL\"\n\telseif ID == 13 then\n\tself.LSLabelB = \"LayerM\"\n\telseif ID == 14 then\n\tself.LSLabelB = \"LayerN\"\n\telseif ID == 15 then\n\tself.LSLabelB = \"LayerO\"\n\telseif ID == 16 then\n\tself.LSLabelB = \"LayerP\"\n\telseif ID == 17 then\n\tself.LSLabelB = \"LayerQ\"\n\telseif ID == 18 then\n\tself.LSLabelB = \"LayerR\"\n\telseif ID == 19 then\n\tself.LSLabelB = \"LayerS\"\n\telseif ID == 20 then\n\tself.LSLabelB = \"LayerT\"\n\telseif ID == 21 then\n\tself.LSLabelB = \"LayerU\"\n\telseif ID == 22 then\n\tself.LSLabelB = \"LayerV\"\n\telseif ID == 23 then\n\tself.LSLabelB = \"LayerW\"\n\telseif ID == 24 then\n\tself.LSLabelB = \"LayerX\"\nend\nself.LSLLLabel = pixcCommon.execAttribute(0, self.LSLLLabel, self.LSLabelB, doSet, true )\nreturn self.LSLLLabel",
     "kind": "func",
     "name": "LayerLabel",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "Input5"
     },
     "body": "if self.SourceTarget == nil then return end\nif type(self.CLSourceDisplay) ~= \"number\" then return end\n\nlocal ID = math.floor(self.CLSourceDisplay)\nif ID == 13 then\n\tself.CLSLSL = \"None\"\n\telseif ID == 14 then\n\tself.CLSLSL = \"Color\"\n\telseif self.SourceTarget == \"Background\" then\n\tself.CLSLSL = \"Background set\"..ID\n\telseif self.SourceTarget == \"Input\" then\n\tself.CLSLSL = \"Input\"..ID\n\telseif self.SourceTarget == \"FrameLogo\" and ID <= 4 then\n\tself.CLSLSL = \"Freame\"..ID\n\telseif self.SourceTarget == \"FrameLogo\" and ID >= 5 then\n\tself.CLSLSL = \"Logo\"..ID-4\nend\nself.LSLabelC = pixcCommon.execAttribute(0, self.LSLabelC, self.CLSLSL, doSet, true )\nreturn self.LSLabelC",
     "kind": "func",
     "name": "SourceLabel",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ],
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "if self.network == nil then\treturn end\nif self.LSScreenID == nil then return end\nlocal ID = math.floor(tonumber(self.LSScreenID))\nself.network:send(ID-1 ..\",1SPCtk\\n\")\n\nif type(self.TakeTime) ~= \"number\" then\n\tself.TakeAll = 1000\n\telse\n\tself.TakeAll = self.TakeTime\nend\nif self.TakeAll <= 1000 then\n\tself.TakeAllTakeTime = 1000\n\telse\n\tself.TakeAllTakeTime = self.TakeAll\nend\n\t\nUtils.Timer.sleep(self.TakeAllTakeTime)\nUtils.Timer.sleep(300)\nself.GetTbarStatus.RefreshAll()\nUtils.Timer.sleep(100)\nself.GetTbarStatus.RefreshAll()",
     "kind": "func",
     "name": "TAKE",
     "slotStyle": "leftNone;rightNone"
    }
   ],
   "kind": "ns",
   "name": "ChangeLayerSource"
  },
  {
   "elems": [
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"0,1PCreb\\n\"",
     "kind": "func",
     "name": "RebootMaster",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"1,1PCreb\\n\"",
     "kind": "func",
     "name": "RebootSlave",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"0,2PCsht\\n\"",
     "kind": "func",
     "name": "ShutsdownMaster",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if self.network == nil then\treturn end\nself.network:send\"1,2PCsht\\n\"",
     "kind": "func",
     "name": "Shutsdownslave",
     "slotStyle": "leftIn;rightNone"
    }
   ],
   "kind": "ns",
   "name": "System"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "attReports": {
      "0": "1.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"0,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen1 = pixcCommon.execAttribute(0, self.SSscreen1, Status, doSet)\n",
     "kind": "func",
     "name": "Screen1",
     "params": [
      {
       "name": "val",
       "type": "int"
      }
     ],
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "1.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"1,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen2 = pixcCommon.execAttribute(0, self.SSscreen2, Status, doSet)",
     "kind": "func",
     "name": "Screen2",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "1.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"2,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen3 = pixcCommon.execAttribute(0, self.SSscreen3, Status, doSet)",
     "kind": "func",
     "name": "Screen3",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "1.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"3,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen4 = pixcCommon.execAttribute(0, self.SSscreen4, Status, doSet)",
     "kind": "func",
     "name": "Screen4",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "0.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"4,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen5 = pixcCommon.execAttribute(0, self.SSscreen5, Status, doSet)",
     "kind": "func",
     "name": "Screen5",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "0.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"5,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen6 = pixcCommon.execAttribute(0, self.SSscreen6, Status, doSet)",
     "kind": "func",
     "name": "Screen6",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "0.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"6,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen7 = pixcCommon.execAttribute(0, self.SSscreen7, Status, doSet)",
     "kind": "func",
     "name": "Screen7",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "0.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"7,SPise\\n\"\nUtils.Timer.sleep(10)\nlocal SS = string.sub(self.data, 9 -1)\nlocal Status = tonumber(SS)\nself.SSscreen8 = pixcCommon.execAttribute(0, self.SSscreen8, Status, doSet)",
     "kind": "func",
     "name": "Screen8",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "GetScreenStatus"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "attReports": {
      "0": "B,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"0,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusA = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusA = \"A\"\nend\n\nself.SSTbar1 = pixcCommon.execAttribute(0, self.SSTbar1, self.TbarStatusA, doSet)",
     "kind": "func",
     "name": "Screen1",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "B,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"1,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusB = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusB = \"A\"\nend\nself.SSTbar2 = pixcCommon.execAttribute(0, self.SSTbar2, self.TbarStatusB, doSet)",
     "kind": "func",
     "name": "Screen2",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "A,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"2,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusC = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusC = \"A\"\nend\nself.SSTbar3 = pixcCommon.execAttribute(0, self.SSTbar3, self.TbarStatusC, doSet)",
     "kind": "func",
     "name": "Screen3",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "A,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"3,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusD = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusD = \"A\"\nend\nself.SSTbar4 = pixcCommon.execAttribute(0, self.SSTbar4, self.TbarStatusD, doSet)",
     "kind": "func",
     "name": "Screen4",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "B,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"4,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusE = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusE = \"A\"\nend\nself.SSTbar5 = pixcCommon.execAttribute(0, self.SSTbar5, self.TbarStatusE, doSet)",
     "kind": "func",
     "name": "Screen5",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "B,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"5,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusF = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusF = \"A\"\nend\nself.SSTbar6 = pixcCommon.execAttribute(0, self.SSTbar6, self.TbarStatusF, doSet)",
     "kind": "func",
     "name": "Screen6",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "B,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,true,true,true,true,true,true"
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"6,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusG = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusG = \"A\"\nend\nself.SSTbar7 = pixcCommon.execAttribute(0, self.SSTbar7, self.TbarStatusG, doSet)",
     "kind": "func",
     "name": "Screen7",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.network == nil then\treturn end\nself.network:send\"7,SPCtb\\n\"\nUtils.Timer.sleep(50)\nlocal data = string.sub(self.data, 9 -1)\nUtils.Timer.sleep(10)\nlocal SS = tonumber(data)\nif SS == 0 then\n\tself.TbarStatusH = \"B\"\n\telseif SS == 65535 then\n\tself.TbarStatusH = \"A\"\nend\nself.SSTbar8 = pixcCommon.execAttribute(0, self.SSTbar8, self.TbarStatusH, doSet)",
     "kind": "func",
     "name": "Screen8",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "self.GetTbarStatus.Screen8()\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen1 == 1 then\r\n\tself.GetTbarStatus.Screen1()\r\nend\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen2 == 1 then\r\n\tself.GetTbarStatus.Screen2()\r\nend\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen3 == 1 then\r\n\tself.GetTbarStatus.Screen3()\r\nend\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen4 == 1 then\r\n\tself.GetTbarStatus.Screen4()\r\nend\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen5 == 1 then\r\n\tself.GetTbarStatus.Screen5()\r\nend\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen6 == 1 then\r\n\tself.GetTbarStatus.Screen6()\r\nend\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen7 == 1 then\r\n\tself.GetTbarStatus.Screen7()\r\nend\r\nUtils.Timer.sleep(200)\r\nif self.SSscreen8 == 1 then\r\n\tself.GetTbarStatus.Screen8()\r\nend",
     "kind": "func",
     "name": "RefreshAll",
     "slotStyle": "leftNone;rightNone"
    }
   ],
   "kind": "ns",
   "name": "GetTbarStatus"
  }
 ],
 "cjv": {
  "h": 200.0,
  "w": 200.0,
  "x": 579.0,
  "y": 24.0
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/ProgramData/AV Stumpfl/Pixera/control_library_user/AscenderTPP.json",
 "license": "1GNTlyr7sewU1l3S6nhV4pln0Lh0PTtoVQtwa0W4/nCmkIL4EvVvqIFeLCy2Vv3y2IvxnWPz2Xu1fZ9ldjcXSSEjFVxyFja2lkO2fJUx3iQrFPwwsw4LTmYibbTW0wDOpN2O+/WIeTTfm2LLZeIgvQ==",
 "name": "AscenderTPP",
 "properties": [
  {
   "cont": "192.168.2.140",
   "name": "IP"
  },
  {
   "cont": "10600",
   "name": "Port"
  },
  {
   "cont": "Yosuke Kikukawa",
   "name": "Creator Name",
   "readOnly": true
  },
  {
   "cont": "1.1.0",
   "name": "Version",
   "readOnly": true
  },
  {
   "cont": "28 Oct. 2021",
   "name": "Data",
   "readOnly": true
  },
  {
   "cont": "false",
   "name": "Auto Init",
   "typeHint": "bool"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}